{"changed":true,"filter":false,"title":"optimal_flow.mos","tooltip":"/optimal_flow.mos","value":"model optimal_flow\n\n  uses \"mmxprs\"\n  uses \"python3\"\n\n  declarations\n\n    ! Sets\n    users : set of integer\n    nodes : set of integer\n    links : set of integer\n    nodes_idx : set of integer\n    operators : set of integer\n\n  end-declarations\n\n  initialisations from  \"optimal_flow.dat\"\n    users nodes links nodes_idx operators\n  end-initialisations\n\n  ! Make sets Static\n  finalise(users)\n  finalise(nodes)\n  finalise(links)\n  finalise(nodes_idx)\n  finalise(operators)\n\n  declarations\n\n    ! Variables\n    origin : array(links) of integer\n    destination : array(links) of integer\n    t : array(links) of integer\n    c : array(links) of integer\n    w : array(links) of integer\n    d: array (users) of integer\n    O: array (users) of integer\n    D: array (users) of integer\n    N: array (nodes) of integer\n    utility : array(users) of integer\n    N_plus: array(nodes_idx,nodes_idx) of integer\n    N_minus: array(nodes_idx,nodes_idx) of integer\n    links_network: array(nodes_idx,nodes_idx) of integer\n    dual: array(nodes_idx,nodes_idx) of integer\n    operators_network: array(operators,operators) of integer\n\n    ! Decision Variables\n    x: array(nodes_idx,nodes_idx,users) of mpvar\n    y: array(nodes_idx,nodes_idx) of mpvar\n\n  end-declarations\n\n  initialisations from  \"optimal_flow.dat\"\n    origin destination t c w d O D N N_plus N_minus utility links_network operators_network users dual\n  end-initialisations\n\n  finalize(users)\n\n  ! Objective Function\n\n    travel_cost := (sum (i in links,s in users) (t(i)*x(origin(i),destination(i),s)) +sum (i in links) y(origin(i),destination(i))*c(i))\n\n  ! Constraints\n\n    !A.1 Capacity constraint for all links in the network\n    forall (i in links) (sum (s in users) x(origin(i),destination(i),s)  <= w(i)*y(origin(i),destination(i)))\n\n    !A.2 Non negativity constraint for flow\n    forall (i in links, s in users) x(origin(i),destination(i),s) >= 0\n\n    !A.3 Binary initialization as indicator for active link\n    forall (i in 1..11) (y(origin(i),destination(i)) is_binary)\n\n    !A.4 Feasibilty of flow in the network\n    forall (s in users) do\n      forall (n in nodes) do\n        if N(n) = O(s) then\n          sum (i in nodes_idx | N_plus(N(n),i)>=1) (x(N(n),N_plus(N(n),i),s)) - sum (i in nodes_idx | N_minus(N(n),i)>=1) (x(N_minus(N(n),i),N(n),s)) = d(s)\n        elif N(n) = D(s) then\n          sum (i in nodes_idx | N_plus(N(n),i)>=1) (x(N(n),N_plus(N(n),i),s)) - sum (i in nodes_idx | N_minus(N(n),i)>=1) (x(N_minus(N(n),i),N(n),s)) = -d(s)\n        else\n          sum (i in nodes_idx | N_plus(N(n),i)>=1) (x(N(n),N_plus(N(n),i),s)) - sum (i in nodes_idx | N_minus(N(n),i)>=1) (x(N_minus(N(n),i),N(n),s)) = 0\n        end-if\n      end-do\n    end-do\n\n    minimise(travel_cost)\n\n  ! Optimality Flag\n\n    if (getprobstat=XPRS_OPT) then\n      writeln(\"Solved.\")\n    else\n      writeln(\"Not solved to optimality\")\n    end-if\n\n  ! Feeding results to Python script\n  idx:=1\n  forall (i in links) do\n    forall (s in users) do\n      flow(idx,s) := getsol(x(origin(i),destination(i),s))\n    end-do\n    idx := idx + 1\n  end-do\n\n  idx := 1\n  forall(q in users) do\n    forall (i in nodes_idx,j in nodes_idx) do\n      if getsol(x(i,j,q)) >= 1 then\n        r(idx) := i\n        r(idx + 1) := j\n        idx := idx + 2\n      end-if\n    end-do\n  end-do\n\n\n  initializations to \"python:\"\n    r O D t c flow utility links_network operators_network dual\n  end-initializations\n\n  pyrun(\"constraint_generation.py\")\n\nend-model\n","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"remove","lines":["r"],"id":2269}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"remove","lines":["p"],"id":2270}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"insert","lines":["P"],"id":2271}],[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"insert","lines":["R"],"id":2272}],[{"start":{"row":119,"column":5},"end":{"row":119,"column":6},"action":"insert","lines":["S"],"id":2273}],[{"start":{"row":119,"column":6},"end":{"row":119,"column":7},"action":"insert","lines":["_"],"id":2274}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"insert","lines":["d"],"id":2275}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"remove","lines":["d"],"id":2276}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"insert","lines":["G"],"id":2277}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"remove","lines":["G"],"id":2278}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"insert","lines":["D"],"id":2279}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":8},"action":"remove","lines":["XPRS_D"],"id":2280},{"start":{"row":119,"column":2},"end":{"row":119,"column":11},"action":"insert","lines":["XPRS_DUAL"]}],[{"start":{"row":119,"column":12},"end":{"row":119,"column":13},"action":"insert","lines":["D"],"id":2281}],[{"start":{"row":119,"column":13},"end":{"row":119,"column":14},"action":"insert","lines":["U"],"id":2282}],[{"start":{"row":119,"column":14},"end":{"row":119,"column":15},"action":"insert","lines":["A"],"id":2283}],[{"start":{"row":119,"column":15},"end":{"row":119,"column":16},"action":"insert","lines":["L"],"id":2284}],[{"start":{"row":119,"column":15},"end":{"row":119,"column":16},"action":"remove","lines":["L"],"id":2285}],[{"start":{"row":119,"column":14},"end":{"row":119,"column":15},"action":"remove","lines":["A"],"id":2286}],[{"start":{"row":119,"column":13},"end":{"row":119,"column":14},"action":"remove","lines":["U"],"id":2287}],[{"start":{"row":119,"column":12},"end":{"row":119,"column":13},"action":"remove","lines":["D"],"id":2288}],[{"start":{"row":119,"column":12},"end":{"row":119,"column":13},"action":"insert","lines":["d"],"id":2289}],[{"start":{"row":119,"column":13},"end":{"row":119,"column":14},"action":"insert","lines":["u"],"id":2290}],[{"start":{"row":119,"column":14},"end":{"row":119,"column":15},"action":"insert","lines":["a"],"id":2291}],[{"start":{"row":119,"column":12},"end":{"row":119,"column":15},"action":"remove","lines":["dua"],"id":2292},{"start":{"row":119,"column":12},"end":{"row":119,"column":16},"action":"insert","lines":["dual"]}],[{"start":{"row":119,"column":12},"end":{"row":119,"column":16},"action":"remove","lines":["dual"],"id":2293}],[{"start":{"row":119,"column":12},"end":{"row":119,"column":13},"action":"remove","lines":[")"],"id":2294}],[{"start":{"row":119,"column":11},"end":{"row":119,"column":12},"action":"remove","lines":["("],"id":2295}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":3},"action":"insert","lines":["w"],"id":2296}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"insert","lines":["r"],"id":2297}],[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"insert","lines":["i"],"id":2298}],[{"start":{"row":119,"column":5},"end":{"row":119,"column":6},"action":"insert","lines":["t"],"id":2299}],[{"start":{"row":119,"column":6},"end":{"row":119,"column":7},"action":"insert","lines":["e"],"id":2300}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"insert","lines":["l"],"id":2301}],[{"start":{"row":119,"column":8},"end":{"row":119,"column":9},"action":"insert","lines":["n"],"id":2302}],[{"start":{"row":119,"column":9},"end":{"row":119,"column":10},"action":"insert","lines":["("],"id":2303}],[{"start":{"row":119,"column":19},"end":{"row":119,"column":20},"action":"insert","lines":[")"],"id":2304}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":20},"action":"remove","lines":["writeln(XPRS_DUAL)"],"id":2305},{"start":{"row":119,"column":2},"end":{"row":119,"column":42},"action":"insert","lines":["maximize(XPRS_DUAL+XPRS_LPSTOP, Profit) "]}],[{"start":{"row":119,"column":34},"end":{"row":119,"column":40},"action":"remove","lines":["Profit"],"id":2306},{"start":{"row":119,"column":34},"end":{"row":119,"column":35},"action":"insert","lines":["t"]}],[{"start":{"row":119,"column":35},"end":{"row":119,"column":36},"action":"insert","lines":["r"],"id":2307}],[{"start":{"row":119,"column":36},"end":{"row":119,"column":37},"action":"insert","lines":["a"],"id":2308}],[{"start":{"row":119,"column":37},"end":{"row":119,"column":38},"action":"insert","lines":["v"],"id":2309}],[{"start":{"row":119,"column":38},"end":{"row":119,"column":39},"action":"insert","lines":["e"],"id":2310}],[{"start":{"row":119,"column":34},"end":{"row":119,"column":39},"action":"remove","lines":["trave"],"id":2311},{"start":{"row":119,"column":34},"end":{"row":119,"column":45},"action":"insert","lines":["travel_cost"]}],[{"start":{"row":119,"column":0},"end":{"row":119,"column":47},"action":"remove","lines":["  maximize(XPRS_DUAL+XPRS_LPSTOP, travel_cost) "],"id":2312}],[{"start":{"row":119,"column":0},"end":{"row":119,"column":2},"action":"insert","lines":["  "],"id":2313}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":3},"action":"insert","lines":["x"],"id":2314}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"insert","lines":["p"],"id":2315}],[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"insert","lines":["r"],"id":2316}],[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"remove","lines":["r"],"id":2317}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"remove","lines":["p"],"id":2318}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":3},"action":"remove","lines":["x"],"id":2319}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":3},"action":"insert","lines":["X"],"id":2320}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"insert","lines":["P"],"id":2321}],[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"insert","lines":["R"],"id":2322}],[{"start":{"row":119,"column":5},"end":{"row":119,"column":6},"action":"insert","lines":["S"],"id":2323}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":6},"action":"remove","lines":["XPRS"],"id":2324},{"start":{"row":119,"column":2},"end":{"row":119,"column":15},"action":"insert","lines":["XPRS_ALG_DUAL"]}],[{"start":{"row":119,"column":2},"end":{"row":119,"column":3},"action":"insert","lines":["w"],"id":2325}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"insert","lines":["i"],"id":2326}],[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"insert","lines":["t"],"id":2327}],[{"start":{"row":119,"column":5},"end":{"row":119,"column":6},"action":"insert","lines":["e"],"id":2328}],[{"start":{"row":119,"column":6},"end":{"row":119,"column":7},"action":"insert","lines":["l"],"id":2329}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"insert","lines":["n"],"id":2330}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"remove","lines":["n"],"id":2331}],[{"start":{"row":119,"column":6},"end":{"row":119,"column":7},"action":"remove","lines":["l"],"id":2332}],[{"start":{"row":119,"column":5},"end":{"row":119,"column":6},"action":"remove","lines":["e"],"id":2333}],[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"remove","lines":["t"],"id":2334}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"remove","lines":["i"],"id":2335}],[{"start":{"row":119,"column":3},"end":{"row":119,"column":4},"action":"insert","lines":["r"],"id":2336}],[{"start":{"row":119,"column":4},"end":{"row":119,"column":5},"action":"insert","lines":["i"],"id":2337}],[{"start":{"row":119,"column":5},"end":{"row":119,"column":6},"action":"insert","lines":["t"],"id":2338}],[{"start":{"row":119,"column":6},"end":{"row":119,"column":7},"action":"insert","lines":["l"],"id":2339}],[{"start":{"row":119,"column":6},"end":{"row":119,"column":7},"action":"remove","lines":["l"],"id":2340}],[{"start":{"row":119,"column":6},"end":{"row":119,"column":7},"action":"insert","lines":["e"],"id":2341}],[{"start":{"row":119,"column":7},"end":{"row":119,"column":8},"action":"insert","lines":["l"],"id":2342}],[{"start":{"row":119,"column":8},"end":{"row":119,"column":9},"action":"insert","lines":["n"],"id":2343}],[{"start":{"row":119,"column":9},"end":{"row":119,"column":10},"action":"insert","lines":["("],"id":2344}],[{"start":{"row":119,"column":23},"end":{"row":119,"column":24},"action":"insert","lines":[")"],"id":2345}],[{"start":{"row":119,"column":10},"end":{"row":119,"column":23},"action":"remove","lines":["XPRS_ALG_DUAL"],"id":2346},{"start":{"row":119,"column":10},"end":{"row":119,"column":11},"action":"insert","lines":["x"]}],[{"start":{"row":119,"column":10},"end":{"row":119,"column":11},"action":"remove","lines":["x"],"id":2347}],[{"start":{"row":119,"column":10},"end":{"row":119,"column":11},"action":"insert","lines":["X"],"id":2348}],[{"start":{"row":115,"column":0},"end":{"row":119,"column":12},"action":"remove","lines":["  forall(i in links,j in links) do","    y_star(origin(i),destination(j)):= (getsol(y(origin(i),destination(j))))","  end-do","","  writeln(X)"],"id":2349}],[{"start":{"row":115,"column":0},"end":{"row":116,"column":0},"action":"remove","lines":["",""],"id":2350}],[{"start":{"row":117,"column":58},"end":{"row":117,"column":59},"action":"insert","lines":[" "],"id":2351}],[{"start":{"row":117,"column":59},"end":{"row":117,"column":60},"action":"insert","lines":["d"],"id":2352}],[{"start":{"row":117,"column":60},"end":{"row":117,"column":61},"action":"insert","lines":["u"],"id":2353}],[{"start":{"row":117,"column":61},"end":{"row":117,"column":62},"action":"insert","lines":["a"],"id":2354}],[{"start":{"row":117,"column":62},"end":{"row":117,"column":63},"action":"insert","lines":["l"],"id":2355}],[{"start":{"row":42,"column":56},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":2356},{"start":{"row":43,"column":0},"end":{"row":43,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":43,"column":4},"end":{"row":43,"column":56},"action":"insert","lines":["links_network: array(nodes_idx,nodes_idx) of integer"],"id":2357}],[{"start":{"row":43,"column":4},"end":{"row":43,"column":17},"action":"remove","lines":["links_network"],"id":2358},{"start":{"row":43,"column":4},"end":{"row":43,"column":5},"action":"insert","lines":["d"]}],[{"start":{"row":43,"column":5},"end":{"row":43,"column":6},"action":"insert","lines":["u"],"id":2359}],[{"start":{"row":43,"column":6},"end":{"row":43,"column":7},"action":"insert","lines":["a"],"id":2360}],[{"start":{"row":43,"column":7},"end":{"row":43,"column":8},"action":"insert","lines":["l"],"id":2361}],[{"start":{"row":53,"column":97},"end":{"row":53,"column":98},"action":"insert","lines":[" "],"id":2362}],[{"start":{"row":53,"column":98},"end":{"row":53,"column":99},"action":"insert","lines":["d"],"id":2363}],[{"start":{"row":53,"column":99},"end":{"row":53,"column":100},"action":"insert","lines":["u"],"id":2364}],[{"start":{"row":53,"column":100},"end":{"row":53,"column":101},"action":"insert","lines":["a"],"id":2365}],[{"start":{"row":53,"column":101},"end":{"row":53,"column":102},"action":"insert","lines":["l"],"id":2366}],[{"start":{"row":65,"column":25},"end":{"row":65,"column":35},"action":"remove","lines":["ual(i) := "],"id":2367}],[{"start":{"row":65,"column":24},"end":{"row":65,"column":25},"action":"remove","lines":["d"],"id":2368}],[{"start":{"row":121,"column":9},"end":{"row":121,"column":15},"action":"remove","lines":["output"],"id":2369},{"start":{"row":121,"column":9},"end":{"row":121,"column":30},"action":"insert","lines":["constraint_generation"]}],[{"start":{"row":0,"column":0},"end":{"row":124,"column":0},"action":"remove","lines":["model optimal_flow","","  uses \"mmxprs\"","  uses \"python3\"","","  declarations","","    ! Sets","    users : set of integer","    nodes : set of integer","    links : set of integer","    nodes_idx : set of integer","    operators : set of integer","","  end-declarations","","  initialisations from  \"optimal_flow.dat\"","    users nodes links nodes_idx operators","  end-initialisations","","  ! Make sets Static","  finalise(users)","  finalise(nodes)","  finalise(links)","  finalise(nodes_idx)","  finalise(operators)","","  declarations","","    ! Variables","    origin : array(links) of integer","    destination : array(links) of integer","    t : array(links) of integer","    c : array(links) of integer","    w : array(links) of integer","    d: array (users) of integer","    O: array (users) of integer","    D: array (users) of integer","    N: array (nodes) of integer","    utility : array(users) of integer","    N_plus: array(nodes_idx,nodes_idx) of integer","    N_minus: array(nodes_idx,nodes_idx) of integer","    links_network: array(nodes_idx,nodes_idx) of integer","    dual: array(nodes_idx,nodes_idx) of integer","    operators_network: array(operators,operators) of integer","","    ! Decision Variables","    x: array(nodes_idx,nodes_idx,users) of mpvar","    y: array(nodes_idx,nodes_idx) of mpvar","","  end-declarations","","  initialisations from  \"optimal_flow.dat\"","    origin destination t c w d O D N N_plus N_minus utility links_network operators_network users dual","  end-initialisations","","  finalize(users)","","  ! Objective Function","","    travel_cost := (sum (i in links,s in users) (t(i)*x(origin(i),destination(i),s)) +sum (i in links) y(origin(i),destination(i))*c(i))","","  ! Constraints","","    !A.1 Capacity constraint for all links in the network","    forall (i in links) (sum (s in users) x(origin(i),destination(i),s)  <= w(i)*y(origin(i),destination(i)))","","    !A.2 Non negativity constraint for flow","    forall (i in links, s in users) x(origin(i),destination(i),s) >= 0","","    !A.3 Binary initialization as indicator for active link","    forall (i in 1..11) (y(origin(i),destination(i)) is_binary)","","    !A.4 Feasibilty of flow in the network","    forall (s in users) do","      forall (n in nodes) do","        if N(n) = O(s) then","          sum (i in nodes_idx | N_plus(N(n),i)>=1) (x(N(n),N_plus(N(n),i),s)) - sum (i in nodes_idx | N_minus(N(n),i)>=1) (x(N_minus(N(n),i),N(n),s)) = d(s)","        elif N(n) = D(s) then","          sum (i in nodes_idx | N_plus(N(n),i)>=1) (x(N(n),N_plus(N(n),i),s)) - sum (i in nodes_idx | N_minus(N(n),i)>=1) (x(N_minus(N(n),i),N(n),s)) = -d(s)","        else","          sum (i in nodes_idx | N_plus(N(n),i)>=1) (x(N(n),N_plus(N(n),i),s)) - sum (i in nodes_idx | N_minus(N(n),i)>=1) (x(N_minus(N(n),i),N(n),s)) = 0","        end-if","      end-do","    end-do","","    minimise(travel_cost)","","  ! Optimality Flag","","    if (getprobstat=XPRS_OPT) then","      writeln(\"Solved.\")","    else","      writeln(\"Not solved to optimality\")","    end-if","","  ! Feeding results to Python script","  idx:=1","  forall (i in links) do","    forall (s in users) do","      flow(idx,s) := getsol(x(origin(i),destination(i),s))","    end-do","    idx := idx + 1","  end-do","","  idx := 1","  forall(q in users) do","    forall (i in nodes_idx,j in nodes_idx) do","      if getsol(x(i,j,q)) >= 1 then","        r(idx) := i","        r(idx + 1) := j","        idx := idx + 2","      end-if","    end-do","  end-do","","","  initializations to \"python:\"","    r O D t c flow utility links_network operators_network dual","  end-initializations","","  pyrun(\"constraint_generation.py\")","","end-model",""],"id":2370}]]},"ace":{"folds":[],"scrolltop":584,"scrollleft":0,"selection":{"start":{"row":52,"column":42},"end":{"row":52,"column":42},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":40,"state":"start","mode":"plugins/fico.ide.language.mosel/mode/mosel"}},"timestamp":1616087043189}