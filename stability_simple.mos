model stability

  uses "mmxprs"
  uses "python3"

  declarations

    ! Sets
    users : set of integer
    paths : set of integer
    links : set of integer
    operators : set of integer

  end-declarations

  initialisations from  "stability.dat"
    users paths links operators
  end-initialisations

  ! Make sets Static
  finalise(users)
  finalise(paths)
  finalise(links)
  finalise(operators)

  declarations

    ! Sets
    t : array(links) of integer
    c : array(links) of integer
    f_star : array(users,paths,operators) of integer
    z_star : array(users,paths,operators) of integer
    y_star : array(users,paths,operators) of integer
    u_stability : array(users) of integer
    utility : array(users) of integer

    ! Decision Variables
    u:array(users) of mpvar
    p:array(users,paths,operators) of mpvar

  end-declarations

  initialisations from  "stability.dat"
    t c f_star y_star z_star u_stability utility
  end-initialisations

  forall (loop in 1..2) do

    ! Objective Functions

      ! Seller - Optimal
      seller_optimal := sum (s in users,r in paths,f in operators) p(s,r,f)*z_star(s,r,f)

      ! Buyer - Optimal
      buyer_optimal := sum (s in users) (u(s))

    ! Constraints
      p(1,1,1) + u(1) = 13
      p(2,6,1) + p(2,6,3) + u(2) = 14
      p(2,3,4) + u(2) = 10
      1000*p(1,1,1) + 200*(p(2,6,1)) >=400
      200*(p(2,6,3)) >=200
      300*(p(2,3,4)) >=200
      u(2) >=-390
      !A.1 Core payoff must be greater than zero
      forall (s in users) u(s) >=0

      !A.2 Prices charged by operators must be greater than zero
      forall (s in users,r in paths,f in operators) p(s,r,f) >=0
      
    ! LP Solutions

      if loop = 1 then
        maximise(seller_optimal)
      else
        maximise(buyer_optimal)
      end-if

    ! Optimality Flag

      if (getprobstat=XPRS_OPT) then
        writeln("Solved.")
      else
        writeln("Not solved to optimality")
      end-if

      forall (s in users) do
        surplus(s) := getsol(u(s))
      end-do

      forall (s in users) do
        forall(r in paths) do
          forall(f in operators) do
            price(s,r,f) := getsol(p(s,r,f))
          end-do
        end-do
      end-do

      idx:= loop
      initializations to "python:"
        surplus price z_star idx
      end-initializations

    pyrun("results.py")
  end-do

end-model
